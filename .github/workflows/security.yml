name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Set up Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
    
    - name: Build Go project
      if: matrix.language == 'go'
      working-directory: ./whatsapp-bridge
      run: go build ./...
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cat > Dockerfile << EOF
        FROM golang:1.24.1-alpine AS go-builder
        WORKDIR /app
        COPY whatsapp-bridge/ .
        RUN go mod download
        RUN CGO_ENABLED=1 go build -o whatsapp-bridge main.go
        
        FROM python:3.11-slim
        RUN apt-get update && apt-get install -y sqlite3 && rm -rf /var/lib/apt/lists/*
        WORKDIR /app
        COPY --from=go-builder /app/whatsapp-bridge /usr/local/bin/
        COPY whatsapp-mcp-server/ ./whatsapp-mcp-server/
        RUN pip install -e ./whatsapp-mcp-server/
        EXPOSE 8080
        CMD ["whatsapp-bridge"]
        EOF
        docker build -t whatsapp-mcp:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'whatsapp-mcp:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
    
    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest
    
    - name: Check Go licenses
      working-directory: ./whatsapp-bridge
      run: go-licenses check ./...
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Install pip-licenses
      run: uv tool install pip-licenses
    
    - name: Check Python licenses
      working-directory: ./whatsapp-mcp-server
      run: |
        uv sync
        uv tool run pip-licenses --format=json --output-file=licenses.json
        echo "Python package licenses:"
        uv tool run pip-licenses

  # SBOM Generation
  sbom:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
    
    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Generate Go SBOM
      working-directory: ./whatsapp-bridge
      run: syft . -o spdx-json=go-sbom.spdx.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Generate Python SBOM
      working-directory: ./whatsapp-mcp-server
      run: |
        uv sync
        syft . -o spdx-json=python-sbom.spdx.json
    
    - name: Upload SBOMs as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-files
        path: |
          whatsapp-bridge/go-sbom.spdx.json
          whatsapp-mcp-server/python-sbom.spdx.json